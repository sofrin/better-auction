import { type NextPage } from "next";
import Image from "next/image";
import Head from "next/head";
import Link from "next/link";

import { api } from "~/utils/api";
import { SetStateAction, useEffect, useRef, useState } from "react";
import { themeChange } from "theme-change";
import { Countdown, Button, Input, Select } from "react-daisyui";

const Home: NextPage = () => {
  useEffect(() => {
    themeChange(false);
    // ðŸ‘† false parameter is required for react project
  }, []);
  let [valueSeconds, setValueSeconds] = useState<number>(10);
  let [valueMinutes, setValueMinutes] = useState<number>(60);
  useEffect(() => {
    const timerSeconds = setTimeout(() => {
      setValueSeconds((v) => (v <= 0 ? valueSeconds : v - 1));
    }, 1000);
    if (valueSeconds === 0) {
      setValueMinutes((v) => v - 1);
      setValueSeconds((v) => (v = 60));
    }
    return () => {
      clearTimeout(timerSeconds);
    };
  }, [valueSeconds]);
  const onIncreaseTimer = () => {
    setValueMinutes((v) => v + 2);
    console.log(lots);

  };
  const onDescriseTimer = () => {
    setValueMinutes((v) => v - 2);
  };
  const [lots, setLots] = useState([{ id: 1, name: 'aaa', amount: 10 },
  { id: 2, name: 'bbb', amount: 10 },
  { id: 3, name: 'ccc', amount: 10 },
  { id: 78, name: 'zzz', amount: 10 }]);
  // const lookup = lots.reduce((prev, next) => {
  //   prev[next.id] = next;
  //   prev.allIds.push(next.id);
  //   return prev;
  // }, { allIds: [] });

  const [addedLotAmount, setAddedLotAmount] = useState();
  const totalAmount = () =>
    lots
      .map((el) => el.amount)
      .reduce((sum, acc) => {
        return sum + acc;
      });
  const onLotAmountChange = (event: Event | undefined, index: number, name: string) => {
    console.log(lots);
    console.log(index);
    // setLots((prev) => prev.map((lot) => {

    // })))

  };
  const lotsList = lots.map((el, index) => (
    <li key={index}>
      <div className="flex items-center gap-2">
        <p className="text-xl">{index + 1}.</p>
        <Input
          type="text"
          defaultValue={el.name}
          placeholder="Type here"
          className="input-bordered input-secondary input w-2/5"
        />
        <Input
          onKeyPress={(event) => {
            if (!/[0-9]/.test(event.key)) {
              event.preventDefault();
            }
          }}
          defaultValue={el.amount}
          value={lots[index]?.amount}
          onChange={() => onLotAmountChange(event, index, el.name)}
          placeholder="Type here"
          className="input-bordered input-secondary  input w-28"
        />
        <Button className="btn-ghost btn ">
          <svg
            width={10}
            height={10}
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth={1.5}
            stroke="currentColor"
            className="h-6 w-6"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M12 4.5v15m7.5-7.5h-15"
            />
          </svg>
        </Button>
        <Input
          onKeyPress={(event) => {
            if (!/[0-9]/.test(event.key)) {
              event.preventDefault();
            }
          }}
          type="text"
          placeholder="123"
          className="input-bordered input-secondary  input w-20"
        />
      </div>
    </li>
  ));
  const onClickAddLot = (lotName: string, lotAmount: number, index: number) => {
    setLots((prev) => [...prev, { name: lotName, amount: lotAmount, id: index }]);
    setLotName("");
    setLotAmount("");
  };
  const [lotName, setLotName] = useState("");
  const [lotAmount, setLotAmount] = useState<number | string>("");
  const changeNameInput = (event: {
    target: { value: SetStateAction<string> };
  }) => {
    setLotName(event.target.value);
  };
  const changeAmountInput = (event: {
    target: { value: SetStateAction<string | number> };
  }) => {
    setLotAmount(event.target.value);
  };
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="m-3">
        <Select
          data-choose-theme
          className="w-30 select-primary select max-w-xs"
        >
          <option value="cmyk">Default</option>
          <option value="dark">Dark</option>
          <option value="autumn">autumn</option>
          <option value="business">business</option>
          <option value="acid">acid</option>
          <option value="lemonade">lemonade</option>
          <option value="night">night</option>
          <option value="coffee">coffee</option>
          <option value="winter">winter</option>
        </Select>
        <Link href="/randomWheel">randomWheel </Link>

        <Button
          onClick={onIncreaseTimer}
          className="btn-outline btn-primary btn gap-2"
        />
        <Button
          onClick={onDescriseTimer}
          className="btn-outline btn-primary btn gap-2"
        />

        <Input
          type="text"
          placeholder="Type here"
          className="input-bordered input-primary  input w-2/5"
        />
        <span className="font-mono text-2xl">
          <Countdown value={valueMinutes} />:
          <Countdown value={valueSeconds} />
        </span>
        <div className="m-5 flex gap-2">
          <Input
            type="text"
            value={lotName}
            onChange={changeNameInput}
            placeholder="Type here"
            className="input-bordered input-primary  input w-2/5"
          />
          <Input
            onKeyPress={(event) => {
              if (!/[0-9]/.test(event.key)) {
                event.preventDefault();
              }
            }}
            value={lotAmount}
            onChange={changeAmountInput}
            placeholder="Type here"
            className="input-bordered input-primary input w-28"
          />
          <Button
            onClick={() => onClickAddLot(lotName, Number(lotAmount))}
            className="btn-outline btn-primary btn gap-2"
          >
            <svg
              width={10}
              height={10}
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={1.5}
              stroke="currentColor"
              className="h-6 w-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M12 4.5v15m7.5-7.5h-15"
              />
            </svg>
            ADD LOT
          </Button>
          {totalAmount()}
        </div>
        <ul>{lotsList}</ul>
      </main>
    </>
  );
};

export default Home;
